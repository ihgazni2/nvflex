{"version":3,"sources":["webpack://NDTREEJS/webpack/universalModuleDefinition","webpack://NDTREEJS/webpack/bootstrap","webpack://NDTREEJS/./cmmn.js","webpack://NDTREEJS/./ndfunc.js","webpack://NDTREEJS/./util.js","webpack://NDTREEJS/./index.js","webpack://NDTREEJS/./ndcls.js","webpack://NDTREEJS/./event-target.js","webpack://NDTREEJS/./ndfuncterm.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","dict_length","entries","gen_guid","replace","Math","random","toString","range","si","ei","Array","from","length","map","v","seqs_slct","seqs","arr","filter","includes","is_empty_dict","dict_values","dict_keys","dict_map","f","k","dict_foreach","dict_plus","d0","d1","dict_update","dtb_kv_rm","dtb","dtb_kv_get_seq","findIndex","dcp","JSON","parse","stringify","mat_map","map_func","lyr","j","cmmn","calc_next_id","nodes","ids","max","is_id","update_one_nodeid","nd","idplus","_id","_tree","_fstch","_lsib","_rsib","_parent","update_nodes_ids","nodes0","nodes1","next_id","id","nnd","is_root","cond0","undefined","cond1","is_fstch","is_lstch","is_leaf","is_lonely","get_children","get_parent","prepend_child","child","cond","old_fstch","append_child","old_lstch","get_lstch","add_rsib","rsib","console","log","add_lsib","lsib","parent","get_lsib","insert_child","which","children","lngth","update_treeid","cnodes","update_disconnected_nodes","nsdfs","get_sdfs","treeid","forEach","update_orig_nodes","nnodes","leafize","rootize","disconnect","get_rsib","get_fstch","push","get_which_child","get_some_children","whiches","some","get_lstsib","including_self","lstrsib","get_sibs","sibs","seq","get_depth","get_ances","get_height","depth","des_depths","get_lyr","sdfs","get_root","get_breadth","lst_parent","ances","unshift","get_rsib_of_fst_ance_having_rsib","get_sdfs_next","fstch","get_drmost_des","lstch","nd_depth","get_dlmost_des","get_edfs_next","get_lsib_of_fst_ance_having_lsib","get_edfs","edfs","nxt","clear_$visited","_$visited","get_sedfs_next","visited","is_sedfs_traverse_finished","start_id","get_sedfs","deepcopy","clear","sedfs","_nd2unhandled_ele","ele","_children","sdfs2mat","unhandled","_pbreadth","next_unhandled","_breadth","_depth","index","concat","sdfs2edfs","sdfs2sedfs","edfs2sdfs","sedfs2sdfs","get_deses","deses","splice","get_root_via_tree","tree","creat_root","creat_nd","is_inited","get_fstsib","get_preceding_sibs","get_following_sibs","get_which_sib","get_some_sibs","get_sibseq","get_count","get_fst_lyr_des_depth","get_lst_lyr_des_depth","get_which_lyr_des_depth","get_which_ance","get_some_ances","get_sdfs_prev","get_edfs_prev","get_sedfs_prev","get_fst_lyr_deses","get_lst_lyr_deses","get_which_lyr_deses","get_some_deses","get_which_deses","nd2ele","edfs2mat","edfs2sedfs","sedfs2mat","sedfs2edfs","rm_fstch","rm_lstch","rm_which","rm_some","whices","rm_all","prepend_child_tree","append_child_tree","add_rsib_tree","add_lsib_tree","insert_child_tree","tree2sdfs","fs","rjson","fn","readFileSync","wjson","js","writeFileSync","is_int_str","parseInt","ndcls","ndfunc","ndfuncterm","ndutil","EventTarget","STRUCT_KEYS","_is_root","_lstch","oldch","_which_child","_some_children","_lstsib","oldrsib","_fstsib","fstsib","_psibs","psibs","sib","_fsibs","fsibs","_sibs","me","_sibseq","_ances","ance","$parent","_deses","drmost","_drmost_des","_sdfs","indexOf","slice","_prepend_child","$is_leaf","_append_child","$lstch","_add_rsib","$is_root","$is_lstch","_insert_child","$depth","$sdfs_next","_sedfs_next","$visited","$rsib","$fstch","_is_sedfs_traverse_finished","startnd","_sedfs","$sdfs","_clear_visited","st","Set","has","$close_at","$open_at","add","_rootize","_update_disconnected_nodes","_disconn","$is_lonely","_leafize","$is_fstch","$lsib","_nd","_Node","super","$guid","$sibs","indexes","old","_load","_dump","dup","ch","$clone","$rsib_of_fst_ance_having_rsib","$drmost_des","$dlmost_des","$lsib_of_fst_ance_having_lsib","$edfs_next","$root","$edfs","dlmost","offset","$deses","rel_depths","abs_depths","$lyr","luncle","$luncle","runcle","$runcle","repeat","indent","_set_id","ndict","$children","_get_ancend_via_id","fill_other_attrs_for_load","other_ks","get_non_struct_keys","rt","Tree","_guid","_rtjson2rt","prnd","prnj","nj","$prepend_child","$add_rsib","$append_child","_dictize_nd_property","nodes_dict","fill_other_attrs_for_dump","$ances","ndindex","this_index","indexof","$sibseq","load","Node","Root","clone","$dump","struct_eq","tree0","tree1","m0","$sdfs2mat","m1","flat0","flat1","ele0","ele1","type","callback","options","event","dflt_sdfs_show_connd","dflt_edfs_show_connd","dflt_calc_conn_map_func","conn","rslt","conns2repr","conns","show_connd","join","clear_ui","_ui","dflt_sdfs_calc_conns","display","get_sdfs_repr_arr","conns_array","dflt_sdfs_show_callback","dflt_edfs_show_callback","dflt_edfs_calc_conns","get_edfs_repr_arr","reverse","dflt_sedfs_show_connd","stag_prefix","stag_suffix","etag_prefix","etag_suffix","gen_tag","tag","prefix","suffix","sdfs_show_all","repr","sdfs_show_root_tree","sdfs_show_from","sdfs_show_to","to","sdfs_show_from_to","sdfs_expand","sdfs_foldup","edfs_show_all","edfs_show_root_tree","edfs_show_from","edfs_show_to","edfs_show_from_to","sedfs_show_all","depths","indents"],"mappings":"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","file":"ndtree.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NDTREEJS\"] = factory();\n\telse\n\t\troot[\"NDTREEJS\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","\nfunction gen_guid() {\n    return(\n        'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n            /[xy]/g,\n            function(c) {\n                let r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8)\n                return(v.toString(16))\n            }\n         )\n    )\n}\n\n\n\nfunction range(si,ei) {\n    return(Array.from({ length: ei-si }).map((v, i) => i + si))\n}\n\nfunction seqs_slct(seqs,arr) {\n    return(arr.filter((r,i)=>(seqs.includes(i))))\n}\n\n\nfunction dict_length(d) {\n    return(Object.entries(d).length)\n}\n\nfunction is_empty_dict(d) {\n    return(Object.entries(d).length === 0)\n}\n\nfunction dict_values(d) {\n    let entries = Object.entries(d)\n    let values = entries.map(r=>r[1])\n    return(values)\n}\n\nfunction dict_keys(d) {\n    let entries = Object.entries(d)\n    let keys = entries.map(r=>r[0])\n    return(keys)\n}\n\nfunction dict_length(d) {\n    let entries = Object.entries(d)\n    return(entries.length)\n}\n\nfunction dict_foreach(d,f) {\n    for(let k in d) {\n        f(k,d[k])\n    }\n    return(d)\n}\n\nfunction dict_map(d,f) {\n    for(let k in d) {\n        d[k] = f(k,d[k])\n    }\n    return(d)\n}\n\nfunction dict_plus(d0,d1) {\n    //unique k ,no common k\n    for(let k in d1) {\n        d0[k] =d1[k]\n    }\n    return(d0)    \n}\n\nfunction dict_update(d0,d1) {\n    //unique k ,no common k\n    for(let k in d1) {\n        let cond = !(k in d0)\n        if(cond) {\n            d0[k] =d1[k]\n        }    \n    }\n    return(d0)\n}\n\n\n\nfunction dtb_kv_rm(k,v,dtb) {\n    dtb = dtb.filter(r=>(r[k]!==v))\n    return(dtb)\n}\n\nfunction dtb_kv_get_seq(k,v,dtb) {\n    let seq = dtb.findIndex(r=>r[k]===v)\n    return(seq)\n}\n\nfunction dcp(o) {\n    return(JSON.parse(JSON.stringify(o)))\n}\n\nfunction mat_map(m,map_func) {\n    for(let i=0;i<m.length;i++) {\n        lyr = m[i]\n        for(let j=0;j<lyr.length;j++) {\n            m[i][j] = map_func(m[i][j],i,j)\n        } \n    }\n    return(m)\n}\n\n\nmodule.exports = {\n    gen_guid:gen_guid,\n    range:range,\n    seqs_slct:seqs_slct,\n    dict_length:dict_length,\n    is_empty_dict:is_empty_dict,\n    dict_values:dict_values,\n    dict_keys:dict_keys,\n    dict_map:dict_map,\n    dict_foreach:dict_foreach,\n    dict_length:dict_length,\n    dict_plus,\n    dict_update,\n    dtb_kv_rm,\n    dtb_kv_get_seq,\n    dcp:dcp,\n    mat_map:mat_map,\n}\n","//\nconst cmmn = require(\"./cmmn.js\")\n\n//tree ndict nodes nnodes same\n\n//util\n\n\n\nfunction calc_next_id(nodes) {\n    if(cmmn.is_empty_dict(nodes)){\n        return(0)\n    } else {\n        let ids = cmmn.dict_keys(nodes)\n        return(Math.max(...ids)+1)\n    }\n}\n\nfunction is_id(n) {\n    let cond = ((n !== null) && (n !== undefined))\n    return(cond) \n}\n\nfunction update_one_nodeid(nd,idplus) {\n    nd._id = nd._id + idplus\n    nd._tree = nd._tree + idplus\n    if(is_id(nd._fstch)) {\n         nd._fstch = nd._fstch + idplus\n    }\n    if(is_id(nd._lsib)) {\n         nd._lsib = nd._lsib + idplus\n    }\n    if(is_id(nd._rsib)) {\n         nd._rsib = nd._rsib + idplus\n    }\n    if(is_id(nd._parent)) {\n         nd._parent = nd._parent + idplus    \n    } \n    return(nd)        \n}\n\n\nfunction update_nodes_ids(nodes0,nodes1) {\n    let next_id = calc_next_id(nodes0)\n    for(let id in nodes1) {\n        let nnd = update_one_nodeid(nodes1[id],next_id) \n        nodes1[nnd._id] = nnd\n        delete nodes1[id]\n    }\n    return(nodes1)\n}\n\n//\n\nfunction creat_root(n=0){\n    let _id = n\n    let root = {\n        _id:_id,\n        _fstch:null,\n        _lsib:null,\n        _rsib:null,\n        _parent:null,\n        _tree:_id  //属于哪个tree\n    }\n    return(root)\n}\n\n\nfunction creat_nd(nodes,n=0) {\n    /*\n        by_dflt  leaf_nd\n    */\n    let _id = calc_next_id(nodes)+n\n    let nd = {\n        _id:_id,\n        _fstch:null,\n        _lsib:undefined,\n        _rsib:undefined,\n        _parent:undefined,\n        _tree:undefined\n    }\n    return(nd)\n}\n\n\n//\n\nfunction is_inited(nd) {\n    //被添加到了树上\n    let cond = (nd._tree !== undefined)\n    return(cond)\n}\n\nfunction is_root(nd) {\n    //tree 是自己\n    let cond0 = (nd._tree!== undefined)\n    let cond1 = (nd._tree === nd._id)\n    return(cond0 && cond1)\n}\n\nfunction is_fstch(nd) {\n    //没有左兄弟\n    let cond = (nd._lsib === null)\n    return(cond)\n}\n\nfunction is_lstch(nd) {\n    //没有右兄弟\n    let cond = (nd._rsib === null)\n    return(cond)\n}\n\nfunction is_leaf(nd) {\n    //没有子\n    let cond = (nd._fstch === null)\n    return(cond)\n}\n\nfunction is_lonely(nd,nodes) {\n    let cond = is_root(nd)\n    if(cond) {\n        return(true)\n    } else {\n        let parent = get_parent(nd,nodes)\n        let children = get_children(parent,nodes)\n        return(children.length === 1)  \n    } \n}\n\n/*\nfunction eq(nd0,nd1) {\n    //id 必须完全一致\n    //只有同一颗树下自己等于自己\n    let cond0 = (nd0._id === nd1._id)\n    let cond1 = (nd0._tree === nd1._tree)\n    return(cond0 && cond1)\n}\n*/\n\n//\n\nfunction prepend_child(nd,child,nodes) {\n    //只有根节点才可以被链接到另一颗树上\n    let cond = is_leaf(nd)\n    child._tree = nd._tree\n    child._lsib = null\n    if(cond){\n        //child 也是lstch\n        child._rsib = null\n        child._parent = nd._id\n    } else {\n        //变更old_fstch\n        let old_fstch = nodes[nd._fstch]\n        //old_fstch 不再是fstch\n        old_fstch._lsib = undefined\n        //更新child\n        child._rsib = old_fstch._id\n        //添加child\n    }\n    nd._fstch = child._id\n    nodes[child._id] = child\n    //返回当前节点\n    return(nd)\n}\n\n\nfunction append_child(nd,child,nodes) {\n    let cond = is_leaf(nd)\n    child._tree = nd._tree\n    child._rsib = null\n    if(cond){\n        //child 也是lstch\n        nd._fstch = child._id\n        child._lsib = null\n    } else {\n        //变更old_lstch\n        let old_lstch = get_lstch(nd,nodes)\n        //old_lstch 不再是lstch\n        old_lstch._parent = undefined\n        old_lstch._rsib = child._id\n    }\n    child._parent = nd._id\n    nodes[child._id] = child\n    return(nd)\n}\n\nfunction add_rsib(nd,rsib,nodes) {\n    //root 不可操作\n    if(is_root(nd)) {\n        console.log(\"cant addrsib to root\")\n        return(nd)\n    }\n    //\n    let cond = is_lstch(nd)\n    rsib._tree = nd._tree\n    if(cond) {\n        rsib._parent = nd._parent\n        nd._parent = undefined\n        rsib._rsib = null\n    } else {\n        rsib._rsib = nd._rsib\n    }\n    nd._rsib = rsib._id\n    nodes[rsib._id] = rsib\n    return(nd)\n}\n\nfunction add_lsib(nd,lsib,nodes) {\n    //root 不可操作\n    if(is_root(nd)) {\n        console.log(\"cant addlsib to root\")\n        return(nd)\n    }\n    //\n    let cond = is_fstch(nd)\n    lsib._tree = nd._tree\n    if(cond) {\n        let parent = get_parent(nd,nodes)\n        nd._lsib = undefined\n        lsib._lsib = null\n        parent._fstch = lsib._id\n    } else {\n        let old_lsib = get_lsib(nd,nodes)\n        old_lsib._rsib = lsib._id\n    }\n    lsib._rsib = nd._id\n    nodes[lsib._id] = lsib\n    return(nd)\n}\n\nfunction insert_child(which,nd,child,nodes) {\n    let children = get_children(nd,nodes)\n    let lngth = children.length\n    if(lngth ===0) {\n        return(prepend_child(nd,child,nodes))\n    } else {\n        let cond = (which<=lngth) && (which >=0)\n        if(!cond) {\n            console.log(\"not in range!!\")\n            return(nd)\n        } else {\n            if(which === 0) {\n                return(prepend_child(nd,child,nodes))\n            } else if(which === lngth) {\n                return(append_child(nd,child,nodes))\n            } else {\n                let lnd = children[which-1]\n                return(add_rsib(lnd,child,nodes))\n            }\n        }\n    }\n}\n\n\nfunction update_treeid(nd,cnodes) {\n    for(let id in cnodes) {\n        cnodes[id]._tree = nd._tree\n    }\n}\n\n\n/*tree*/\n\nfunction prepend_child_tree(nd,nodes,cnodes) {\n    cnodes = update_nodes_ids(nodes,cnodes)\n    let k = cmmn.dict_keys(cnodes)[0]\n    let child = get_root(cnodes[k],cnodes)\n    nd = prepend_child(nd,child,nodes) \n    update_treeid(nd,cnodes)\n    cmmn.dict_plus(nodes,cnodes)\n    return(nd)\n}\n\nfunction append_child_tree(nd,nodes,cnodes) {\n    cnodes = update_nodes_ids(nodes,cnodes)\n    let k = cmmn.dict_keys(cnodes)[0]\n    let child = get_root(cnodes[k],cnodes)\n    nd = append_child(nd,child,nodes) \n    update_treeid(nd,cnodes)\n    cmmn.dict_plus(nodes,cnodes)\n    return(nd)\n}\n\nfunction add_rsib_tree(nd,nodes,cnodes) {\n    cnodes = update_nodes_ids(nodes,cnodes)\n    let k = cmmn.dict_keys(cnodes)[0]\n    let child = get_root(cnodes[k],cnodes)\n    nd = add_rsib(nd,child,nodes) \n    update_treeid(nd,cnodes)\n    cmmn.dict_plus(nodes,cnodes)\n    return(nd)\n}\n\nfunction add_lsib_tree(nd,nodes,cnodes) {\n    cnodes = update_nodes_ids(nodes,cnodes)\n    let k = cmmn.dict_keys(cnodes)[0]\n    let child = get_root(cnodes[k],cnodes)\n    nd = add_lsib(nd,child,nodes) \n    update_treeid(nd,cnodes)\n    cmmn.dict_plus(nodes,cnodes)\n    return(nd)\n}\n\nfunction insert_child_tree(which,nd,nodes,cnodes) {\n    cnodes = update_nodes_ids(nodes,cnodes)\n    let k = cmmn.dict_keys(cnodes)[0]\n    let child = get_root(cnodes[k],cnodes)\n    nd = insert_child(which,nd,child,nodes) \n    update_treeid(nd,cnodes)\n    cmmn.dict_plus(nodes,cnodes)\n    return(nd)\n}\n\n\n/*tree*/\n\nfunction update_disconnected_nodes(nd,nodes) {\n    let nsdfs = get_sdfs(nd,nodes)\n    let treeid = nsdfs[0]._id\n    nsdfs.forEach(\n       nd=> {\n           nd._tree =treeid \n       }\n    ) \n    return(nsdfs)\n}\n\nfunction update_orig_nodes(nsdfs,nodes) {\n    let nnodes = {}\n    nsdfs.map(\n        nd => {\n            let id = nd._id\n            nnodes[id] = nd\n            delete nodes[id]\n        }\n    )\n    return(nnodes)  \n}\n\n\nfunction leafize(nd) {\n    nd._fstch = null\n    //nd._lsib = null\n    //nd._rsib = null\n    return(nd)\n}\n\nfunction rootize(nd) {\n    nd._lsib = null\n    nd._rsib = null\n    nd._parent = null\n    return(nd) \n}\n\n\nfunction disconnect(nd,nodes) {\n    let cond = is_root(nd)\n    if(cond) {\n        //do nothing\n        return([nd,nodes])\n    } else if(is_lonely(nd,nodes)) {\n        //\n        let parent =  nodes[nd._parent]\n        leafize(parent);\n        let nsdfs = update_disconnected_nodes(nd,nodes);\n        let nnodes = update_orig_nodes(nsdfs,nodes)\n        rootize(nd);\n        //\n        return([nd,nnodes])         \n    } else {\n        if(is_fstch(nd)) {\n            //节点变味新树的根节点\n            let rsib = get_rsib(nd,nodes)\n            //右兄弟变成了fstch, lsib 指向null\n            rsib._lsib = null\n            //右兄弟变成了fstch,parent要指向rsib\n            //rsib._parent = nd._parent fstch的parent不需要改变\n            // parent 的fstch 要指向rsib\n            let parent = get_parent(nd,nodes) \n            parent._fstch = nd._rsib  \n            //后代节点关系不变，但是tree变为当前节点._id\n            let nsdfs = update_disconnected_nodes(nd,nodes)\n            //从原来的nodes删除分离出的子树的所有节点\n            let nnodes = update_orig_nodes(nsdfs,nodes)\n            //nd 变为分离出去的tree的root\n            rootize(nd);\n            //\n            return([nd,nnodes])             \n        } else if(is_lstch(nd)) {\n            //节点变味新树的根节点\n            let lsib = get_lsib(nd,nodes) \n            lsib._rsib = nd._rsib\n            //左兄弟变成了lstch,左邻居要指向parent\n            lsib._parent = nd._parent\n            //后代节点关系不变，但是tree变为当前节点._id\n            let nsdfs = update_disconnected_nodes(nd,nodes) \n            //从原来的nodes删除分离出的子树的所有节点\n            let nnodes = update_orig_nodes(nsdfs,nodes)\n            //nd 变为分离出去的tree的root\n            rootize(nd);\n            //\n            return([nd,nnodes])\n        } else {\n            //节点变味新树的根节点\n            let lsib = get_lsib(nd,nodes) \n            lsib._rsib = nd._rsib\n            //后代节点关系不变，但是tree变为当前节点._id\n            let nsdfs = update_disconnected_nodes(nd,nodes)\n            //从原来的nodes删除分离出的子树的所有节点\n            let nnodes = update_orig_nodes(nsdfs,nodes)\n            //nd 变为分离出去的tree的root\n            rootize(nd);\n            //\n            return([nd,nnodes])\n        }\n    }   \n}\n\n//在父节点上操作\nfunction rm_fstch(nd,nodes) {\n    let fstch = get_fstch(nd,nodes)\n    if(fstch===null) {\n        return([nd,nodes])\n    } else {\n        return(disconnect(fstch,nodes))\n    }\n}\n\nfunction rm_lstch(nd,nodes) {\n    let lstch = get_lstch(nd,nodes)\n    if(lstch===null) {\n        return([nd,nodes])\n    } else {\n        return(disconnect(lstch,nodes))\n    }\n}\n\nfunction rm_which(index,nd,nodes) {\n    let child = get_which_child(index,nd,nodes)\n    if(child===null) {\n        return([nd,nodes])\n    } else {\n        return(disconnect(child,nodes))\n    }     \n}\n\nfunction rm_some(nd,nodes,...whices) {\n    let some = get_some_children(nd,nodes,...whiches) \n    for(let i=0;i<some.length;i++) {\n        disconnect(some[i],nodes)\n    }\n    return([nd,nodes])\n}\n\nfunction rm_all(nd,nodes) {\n    let children = get_children(nd,nodes)\n    for(let i=0;i<children.length;i++) {\n        disconnect(children[i],nodes)\n    }\n    return(nodes)\n}\n\n/**/\n\n//child\n\nfunction get_fstch(nd,nodes) {\n    let fstch = (nd._fstch===null)?null:nodes[nd._fstch]\n    return(fstch)\n}\n\n\nfunction get_children(nd,nodes){\n    let children = []\n    let child = get_fstch(nd,nodes)\n    while(child!==null){\n        children.push(child)\n        child = get_rsib(child,nodes)\n    }\n    return(children)\n}\n\nfunction get_lstch(nd,nodes) {\n    let children = get_children(nd,nodes)\n    if(children.length ===0){\n        return(null)\n    } else {\n        return(children[children.length-1])\n    }\n}\n\nfunction get_which_child(which,nd,nodes) {\n    let children = get_children(nd,nodes)\n    if(children.length ===0){\n        return(null)\n    } else {\n        let cond = (which>children.length-1) || (which <0)\n        if(cond){\n            return(null)\n        } else {\n            return(children[which])\n        }\n    }\n}\n\nfunction get_some_children(nd,nodes,...whiches) {\n    let children = get_children(nd,nodes)\n    let some = []\n    if(children.length ===0) {\n        \n    } else {\n        for(let i=0;i<whiches.length;i++) {\n            let which = whiches[i]\n            let cond = (which>children.length-1) || (which <0)\n            if(cond) {\n                \n            } else {\n                some.push(children[which])\n            }\n        }\n    }\n    return(some)\n}\n\n\n////sibs\nfunction get_lstsib(nd,nodes,including_self=false) {\n    let lstrsib = nd\n    let rsib = get_rsib(nd,nodes)\n    while(rsib!==null) {\n        lstrsib = rsib\n        rsib = get_rsib(rsib,nodes)\n    }\n    if(including_self){\n        return(lstrsib)\n    } else {\n        if(lstrsib._id !== nd._id) {\n            return(lstrsib)\n        } else {\n            return(null)\n        }\n    }\n}\n\n\nfunction get_preceding_sibs(nd,nodes) {\n    let sibs = get_sibs(nd,nodes,true)\n    let seq = cmmn.dtb_kv_get_seq(\"_id\",nd._id,sibs)\n    let some = []\n    if(sibs.length ===0) {\n        \n    } else {\n        for(let i=0;i<sibs.length;i++) {\n            let cond = i<seq\n            if(cond) {\n                some.push(sibs[i])\n            }\n        }\n    }\n    return(some)\n}\n\nfunction get_following_sibs(nd,nodes) {\n    let sibs = get_sibs(nd,nodes,true)\n    let seq = cmmn.dtb_kv_get_seq(\"_id\",nd._id,sibs)\n    let some = []\n    if(sibs.length ===0) {\n        \n    } else {\n        for(let i=0;i<sibs.length;i++) {\n            let cond = i>seq\n            if(cond) {\n                some.push(sibs[i])\n            }\n        }\n    }\n    return(some)\n}\n\nfunction get_sibs(nd,nodes,including_self=false) {\n    let parent = get_parent(nd,nodes)\n    let sibs;\n    if(parent !== null) { \n        sibs = get_children(parent,nodes)\n    } else {\n        sibs =[nd]\n    }\n    if(including_self) {\n        return(sibs)\n    } else {\n        sibs = cmmn.dtb_kv_rm('_id',nd._id,sibs)\n    }\n    return(sibs)\n}\n\nfunction get_fstsib(nd,nodes,including_self=false) {\n    let sibs = get_sibs(nd,nodes,true)\n    if(including_self) {\n        return(sibs[0])\n    } else {\n        if(sibs[0]._id === nd._id) {\n            return(null)\n        } else {\n            return(sibs[0])\n        }\n    }\n}\n\n\nfunction get_which_sib(which,nd,nodes) {\n    let sibs = get_sibs(nd,nodes,true)\n    let lngth = sibs.length\n    let cond = (which<=lngth-1) && (which >=0)\n    if(cond) {\n        return(sibs[which])\n    } else {\n        return(null)\n    }\n}\n\nfunction get_some_sibs(nd,nodes,...whiches) {\n    let sibs = get_sibs(nd,nodes,true)\n    let some = []\n    if(sibs.length ===0) {\n        \n    } else {\n        for(let i=0;i<whiches.length;i++) {\n            let which = whiches[i]\n            let cond = (which>sibs.length-1) || (which <0)\n            if(cond) {\n                \n            } else {\n                some.push(sibs[which])\n            }\n        }\n    }\n    return(some)\n}\n\nfunction get_sibseq(nd,nodes) {\n    let sibs = get_sibs(nd,nodes,true)\n    let seq = cmmn.dtb_kv_get_seq(\"_id\",nd._id,sibs)\n    return(seq)\n}\n\nfunction get_lsib(nd,nodes) {\n    let sibs = get_sibs(nd,nodes,true)\n    let seq = cmmn.dtb_kv_get_seq(\"_id\",nd._id,sibs)\n    if(seq === 0) {\n        return(null)\n    } else {\n        return(sibs[seq-1])\n    }\n}\n\nfunction get_rsib(nd,nodes) {\n    let rsib = (nd._rsib===null)?null:nodes[nd._rsib]\n    return(rsib)\n}\n\n//layer\n\nfunction get_depth(nd,nodes) {\n    let ances = get_ances(nd,nodes,true)\n    return(ances.length-1)\n}\n\nfunction get_height(nd,nodes) {\n    let depth = get_depth(nd,nodes)\n    let sdfs = get_sdfs(nd,nodes)\n    let des_depths = sdfs.map(r=>get_depth(r,nodes))\n    let max = Math.max(...des_depths)\n    return(max-depth+1)\n}\n\nfunction get_fst_lyr_des_depth(nd,nodes) {\n    let cond = is_leaf(nd)\n    if(cond) {\n        return(null)\n    } else {\n        let depth = get_depth(nd,nodes)\n        return(depth+1)\n    }\n}\n\nfunction get_lst_lyr_des_depth(nd,nodes) {\n    let cond = is_leaf(nd)\n    if(cond) {\n        return(null)\n    } else {\n        let depth = get_depth(nd,nodes)\n        let sdfs = get_sdfs(nd,nodes)\n        let des_depths = sdfs.map(r=>get_depth(r,nodes))\n        let max = Math.max(...des_depths)\n        return(max)\n    }\n}\n\nfunction get_which_lyr_des_depth(which,nd,nodes) {\n    let depth = get_depth(nd,nodes)\n    let height = get_height(nd,nodes)\n    if(height<=which){\n        return(null)\n    } else {\n        return(depth+which)\n    }\n}\n\n\nfunction get_lyr(nd,nodes) {\n    let root = get_root(nd,nodes)\n    let sdfs = get_sdfs(root,nodes)\n    let depth = get_depth(nd,nodes)\n    let lyr = sdfs.filter(nd=>(get_depth(nd,nodes) === depth))\n    return(lyr) \n}\n\nfunction get_breadth(nd,nodes) {\n    let lyr = get_lyr(nd,nodes)\n    let breadth = cmmn.dtb_kv_get_seq('_id',nd._id,lyr)\n    return(breadth)\n}\n\n\nfunction get_count(nd,nodes) {\n    let sdfs = get_sdfs(nd,nodes)\n    return(sdfs.length)\n}\n\n//ance\nfunction get_root(nd,nodes) {\n    /*\n        get_root(root,nodes)\n        get_root(child,nodes)\n    */\n    let lst_parent = nd\n    let parent = get_parent(nd,nodes)  \n    while(parent !== null) {\n        lst_parent = parent\n        parent = get_parent(parent,nodes)\n    }\n    return(lst_parent)\n}\n\nfunction get_parent(nd,nodes) {\n    let parent;\n    if(is_root(nd)) {\n        parent = null\n    } else {\n        let lstrsib = get_lstsib(nd,nodes,true)\n        parent = nodes[lstrsib._parent]\n    }\n    return(parent)\n}\n\nfunction get_ances(nd,nodes,including_self=false) {\n    let ances = []\n    let parent = get_parent(nd,nodes)  \n    while(parent !== null) {\n        ances.push(parent)\n        parent = get_parent(parent,nodes)\n    }\n    if(including_self){\n        ances.unshift(nd)\n    } else {\n        \n    }\n    return(ances)\n}\n\nfunction get_which_ance(which,nd,nodes) {\n    let ances = get_ances(nd,nodes,true)\n    let lngth = ances.length\n    let cond = (which<lngth) && (which>=0)\n    if(cond) {\n        return(ances[which])\n    } else {\n        return(null)\n    }\n}\n\nfunction get_some_ances(nd,nodes,...whiches) {\n    let ances = get_ances(nd,nodes,true)\n    let some = []\n    if(ances.length ===0) {\n        \n    } else {\n        for(let i=0;i<whiches.length;i++) {\n            let which = whiches[i]\n            let cond = (which>ances.length-1) || (which <0)\n            if(cond) {\n                \n            } else {\n                some.push(ances[which])\n            }\n        }\n    }\n    return(some)\n}\n\n\n\n//sdfs  depth-first  record-when-open-tag\n\nfunction get_rsib_of_fst_ance_having_rsib(nd,nodes) {\n    /*\n        along the parent chain until root,not_including_self\n        if the parent have rsib,return the rsib-of-parent\n        ---------\n    */\n    let parent = get_parent(nd,nodes)\n    while(parent!==null) {\n        let rsib = get_rsib(parent,nodes)\n        if(rsib!==null) {\n            return(rsib)\n        } else {\n            parent = get_parent(parent,nodes)\n        }\n    }\n    return(null)\n}\n\n\nfunction get_sdfs_next(nd,nodes) {\n    /*\n        如果有child, 返回first-child\n            如果有rsib,返回rsib\n                沿着祖先链往上,找到第一个有rsib的ance,返回这个ance的rsib\n        如果返回null,表明当前节点是sdfs数组的最后一个节点\n    */\n    let fstch = get_fstch(nd,nodes)\n    if(fstch !== null) {\n        return(fstch)\n    } else {\n        let rsib = get_rsib(nd,nodes)\n        if(rsib !== null) {\n            return(rsib)\n        } else {\n            return(get_rsib_of_fst_ance_having_rsib(nd,nodes))\n        }\n    }\n}\n\nfunction get_drmost_des(nd,nodes){\n    /*\n       down-most  and right-most of subtree\n       including_self\n    */\n    let old_lstch = nd\n    let lstch = get_lstch(nd,nodes)\n    while(lstch !== null) {\n        old_lstch = lstch\n        lstch = get_lstch(lstch,nodes)\n    }\n    return(old_lstch)\n}\n\nfunction get_sdfs_prev(nd,nodes) {\n    /*\n        如果是root ,返回null 因为root 是起始点\n        如果是叶子节点\n            如果有lsib,返回lsib\n            如果没有lsib,返回parent(没有lsib 说明这个节点是first-child)\n        如果不是叶子节点\n             如果有左邻居\n                 lsib是leaf,返回lsib\n                 lsib不是leaf,返回drmost-of-lsib \n             如果没有lsib,返回parent\n    */ \n    if(is_root(nd)) {\n        return(null)\n    }\n    let cond = is_leaf(nd)\n    if(cond) {\n        let lsib = get_lsib(nd,nodes)\n        if(lsib !== null) {\n            return(lsib)\n        } else {\n            let parent = get_parent(nd,nodes)\n            return(parent)\n        }\n    } else {\n        let lsib = get_lsib(nd,nodes)\n        if(lsib !== null) {\n            let cond = is_leaf(lsib)\n            if(cond) {\n                return(lsib)\n            } else {\n                return(get_drmost_des(lsib,nodes))\n            }\n        } else {\n            let parent = get_parent(nd,nodes)\n            return(parent)\n        }\n    }\n}\n\n\nfunction get_sdfs(nd,nodes) {\n    let nd_depth = get_depth(nd,nodes)\n    let sdfs =[]\n    while(nd!==null) {\n        sdfs.push(nd)\n        nd = get_sdfs_next(nd,nodes)\n        if(nd!==null) {\n            let depth = get_depth(nd,nodes)\n            if(depth<=nd_depth) {\n                break\n            }\n        }\n    }\n    return(sdfs)\n}\n\n//edfs\n\n\nfunction get_dlmost_des(nd,nodes) {\n    /*\n        including_self\n    */\n    let old_fstch = nd\n    let fstch = get_fstch(nd,nodes)\n    while(fstch !== null) {\n        old_fstch = fstch\n        fstch = get_fstch(fstch,nodes)\n    }\n    return(old_fstch)\n}\n\nfunction get_edfs_next(nd,nodes) {\n    let rsib = get_rsib(nd,nodes)\n    if(rsib === null) {\n        //如果没有右兄弟，说明节点是lstch,此时应该返回父节点\n        let p = get_parent(nd,nodes)\n        return(p)\n    } else {\n       //如果有右兄弟，返回down-left-most-of-rsib\n       return(get_dlmost_des(rsib,nodes))\n    }\n}\n\nfunction get_lsib_of_fst_ance_having_lsib(nd,nodes) {\n    /*\n        along the parent chain until root,not_including_self\n        if the parent have lsib,return the lsib-of-parent\n        ---------\n    */\n    let parent = get_parent(nd,nodes)\n    while(parent!==null) {\n        let lsib = get_lsib(parent,nodes)\n        if(lsib!==null) {\n            return(lsib)\n        } else {\n            parent = get_parent(parent,nodes)\n        }\n    }\n    return(null)\n}\n\n\n\nfunction get_edfs_prev(nd,nodes) {\n    let cond = is_leaf(nd)\n    if(!cond) {\n        return(get_lstch(nd,nodes))\n    } else {\n       let lsib = get_lsib(nd,nodes)\n       if(lsib === null) {\n           return(get_lsib_of_fst_ance_having_lsib(nd,nodes))\n       } else {\n           return(lsib)\n       }\n    }    \n}\n\n\nfunction get_edfs(nd,nodes) {\n    let edfs = []\n    let nxt = get_dlmost_des(nd,nodes)\n    while(nxt !== null ) {\n        edfs.push(nxt)\n        if(nxt._id === nd._id) {\n            break;\n        } else {\n            nxt = get_edfs_next(nxt,nodes)\n        }\n    }\n    return(edfs)\n}\n\n//sedfs\n\nfunction clear_$visited(nodes) {\n    cmmn.dict_foreach(nodes,(k,v)=>{nodes[k]._$visited = false})    \n}\n\nfunction get_sedfs_next(nd,nodes) {\n    let visited = nd._$visited\n    let cond = is_leaf(nd)\n    if(cond) {\n        if(visited) {\n            let rsib = get_rsib(nd,nodes)\n            if(rsib === null) {\n                return(get_parent(nd,nodes))  \n            } else {\n                return(rsib)\n            } \n        } else {\n            nd._$visited = true\n            return(nd)\n        }\n    } else {\n        if(visited) {\n            let rsib = get_rsib(nd,nodes)\n            if(rsib === null) {\n                return(get_parent(nd,nodes)) \n            } else {\n                return(rsib)\n            } \n        } else {\n            nd._$visited = true\n            return(get_fstch(nd,nodes))    \n        }\n    }    \n}\n\n\nfunction get_sedfs_prev(visited,nd,nodes) {\n    let cond = is_leaf(nd)\n    if(cond) {\n        if(visited) {\n            return(nd)\n        } else {\n            let lsib = get_lsib(nd,nodes)\n            if(lsib === null) {\n                return(get_parent(nd,nodes))\n            } else {\n                return(lsib)\n            }\n        }\n    } else {\n        if(visited) {\n            return(get_lstch(nd,nodes))\n        } else {\n            let lsib = get_lsib(nd,nodes)\n            if(lsib === null) {\n                return(get_parent(nd,nodes))\n            } else {\n                return(lsib)\n            }\n        }\n    }\n}\n\nfunction is_sedfs_traverse_finished(start_id,nd) {\n    let cond = (nd._$visited) && (start_id === nd._id)\n    return(cond)\n}\n\nfunction get_sedfs(nd,nodes,deepcopy=false,clear=true) {\n    let sedfs = []\n    clear_$visited(nodes)   \n    let start_id = nd._id\n    while(!is_sedfs_traverse_finished(start_id,nd)) {\n        deepcopy? sedfs.push(cmmn.dcp(nd)):sedfs.push(nd)\n        nd = get_sedfs_next(nd,nodes)\n    }\n    deepcopy?sedfs.push(cmmn.dcp(nd)):sedfs.push(nd)\n    if(clear){\n        clear_$visited(nodes)\n    }\n    return(sedfs)\n}\n\n//\n\nfunction nd2ele(nd,nodes) {\n    let ele = {}\n    ele._depth = get_depth(nd,nodes)\n    ele._breadth = get_breadth(nd,nodes) \n    let p = get_parent(nd,nodes)\n    ele._pbreadth = (p===null)? null : get_breadth(p,nodes) \n    ele._id = nd._id\n    return(ele)\n}\n\n\n\n\nfunction _nd2unhandled_ele(nd) {\n    let o = {}\n    o.ele = {}\n    o.nd = nd\n    o.ele._id = nd._id\n    o.ele._children = []\n    return(o) \n}\n\nfunction sdfs2mat(sdfs,nodes) {\n    let m = []\n    let nd = sdfs[0]\n    let unhandled = [_nd2unhandled_ele(nd)]\n    unhandled[0].ele._pbreadth = null\n    while(unhandled.length>0){\n        let next_unhandled = []\n        for(let i=0;i<unhandled.length;i++) {\n            unhandled[i].ele._breadth = i\n            unhandled[i].ele._depth = m.length\n            let children = get_children(unhandled[i].nd,nodes)\n            children = children.map(nd=>_nd2unhandled_ele(nd))\n            children.forEach(\n                (r,index)=>{\n                    r.ele._pbreadth = unhandled[i].ele._breadth\n                    unhandled[i].ele._children.push([(m.length+1),next_unhandled.length+index])\n                }\n            )\n            next_unhandled = next_unhandled.concat(children)\n        }\n        let lyr = unhandled.map(r=>r.ele)\n        m.push(lyr)\n        unhandled = next_unhandled\n    }   \n    return(m)        \n}\n\nfunction sdfs2edfs(sdfs,nodes) {\n    return(get_edfs(sdfs[0],nodes))\n}\n\nfunction sdfs2sedfs(sdfs,nodes,deepcopy=false,clear=true) {\n    return(get_sedfs(sdfs[0],nodes,deepcopy,clear))\n}\n\nfunction edfs2mat(edfs,nodes) {\n    let sdfs = edfs2sdfs(edfs,nodes)\n    let m = sdfs2mat(sdfs,nodes)\n    return(m)\n}\n\nfunction edfs2sdfs(edfs,nodes) {\n    let nd = edfs[edfs.length-1]\n    return(get_sdfs(nd,nodes))\n}\n\nfunction edfs2sedfs(edfs,nodes,deepcopy=false,clear=true) {\n    let sdfs = edfs2sdfs(edfs,nodes)\n    return(sdfs2sedfs(sdfs,nodes,deepcopy,clear)) \n}\n\nfunction sedfs2mat(sedfs,nodes) {\n    let sdfs = sedfs2sdfs(sedfs,nodes)\n    return(sdfs2mat(sdfs,nodes))\n}        \n\nfunction sedfs2sdfs(sedfs,nodes) {\n    let nd = sedfs[0]\n    return(get_sdfs(nd,nodes))\n}        \n\nfunction sedfs2edfs(sedfs,nodes) {\n    let sdfs = sedfs2sdfs(sedfs,nodes)\n    return(sdfs2edfs(sdfs,nodes))\n}\n\n\n//\n\nfunction get_deses(nd,nodes,including_self=false) {\n    let deses = get_sdfs(nd,nodes)\n    if(including_self) {\n    } else {\n        deses.splice(0,1)\n    }\n    return(deses)\n}\n\nfunction get_fst_lyr_deses(nd,nodes) {\n    return(get_children(nd,nodes))\n}\n\nfunction get_lst_lyr_deses(nd,nodes) {\n    let deses = get_deses(nd,nodes,false)\n    let des_depths = sdfs.map(r=>get_depth(r,nodes))\n    let max = Math.max(...des_depths)\n    deses = deses.filter(r=>(get_depth(r,nodes)===max))\n    return(deses)\n}\n\nfunction get_which_lyr_deses(which,nd,nodes) {\n    let depth = get_depth(nd,nodes)\n    let deses = get_deses(nd,nodes,false)\n    let des_depths = sdfs.map(r=>get_depth(r,nodes))\n    deses = deses.filter(r=>(get_depth(r,nodes)===(depth+which)))\n    return(deses)\n}\n\nfunction get_some_deses(nd,nodes,...whiches) {\n    let deses = whiches.map(which => get_which_deses(which,nd,nodes))\n    deses = Array.prototype.concat(...deses)\n    return(deses)\n}\n\n\n//\nfunction get_root_via_tree(tree) {\n    let k = cmmn.dict_keys(tree)[0]\n    let nd = tree[k]\n    let root = get_root(nd,tree)\n    return(root)\n}\n\nfunction tree2sdfs(tree) {\n    let root = get_root_via_tree(tree)\n    let sdfs = get_sdfs(root,tree) \n    return(sdfs)\n}\n\n\n\nmodule.exports = {\n    //\n    calc_next_id,\n    update_nodes_ids,\n    //creat\n    creat_root:creat_root,\n    creat_nd:creat_nd,\n    //is\n    is_inited:is_inited,\n    is_root:is_root,\n    is_fstch:is_fstch,\n    is_lstch:is_lstch,\n    is_leaf:is_leaf,\n    is_lonely:is_lonely,\n    is_id:is_id,\n    //insert \n    prepend_child:prepend_child,\n    append_child:append_child,\n    insert_child:insert_child,\n    add_rsib:add_rsib,\n    add_lsib:add_lsib,\n    //child\n    get_fstch:get_fstch,\n    get_rsib:get_rsib,\n    get_children:get_children,\n    get_lstch:get_lstch,\n    get_which_child:get_which_child,\n    get_some_children:get_some_children,\n    //sib\n    get_fstsib:get_fstsib,\n    get_lstsib:get_lstsib,\n    get_preceding_sibs:get_preceding_sibs,\n    get_following_sibs:get_following_sibs,\n    get_sibs:get_sibs,\n    get_which_sib:get_which_sib,\n    get_some_sibs:get_some_sibs,\n    get_sibseq:get_sibseq,\n    get_lsib:get_lsib,\n    get_rsib:get_rsib,\n    //mat\n    get_lyr:get_lyr,\n    get_breadth:get_breadth,\n    get_count:get_count,\n    get_depth:get_depth,\n    get_height:get_height,\n    get_fst_lyr_des_depth:get_fst_lyr_des_depth,\n    get_lst_lyr_des_depth:get_lst_lyr_des_depth,\n    get_which_lyr_des_depth:get_which_lyr_des_depth,\n    //ance\n    get_root:get_root,\n    get_parent:get_parent,\n    get_ances:get_ances,\n    get_which_ance:get_which_ance,\n    get_some_ances:get_some_ances,\n    //sdfs\n    get_rsib_of_fst_ance_having_rsib:get_rsib_of_fst_ance_having_rsib,\n    get_sdfs_next:get_sdfs_next,\n    get_drmost_des:get_drmost_des,\n    get_sdfs_prev:get_sdfs_prev,\n    get_sdfs:get_sdfs,\n    //edfs\n    get_lsib_of_fst_ance_having_lsib:get_lsib_of_fst_ance_having_lsib,\n    get_dlmost_des:get_dlmost_des,\n    get_edfs_next:get_edfs_next,\n    get_edfs_prev:get_edfs_prev,\n    get_edfs:get_edfs,\n    //sedfs\n    clear_$visited:clear_$visited,\n    get_sedfs_next:get_sedfs_next,\n    is_sedfs_traverse_finished:is_sedfs_traverse_finished,\n    get_sedfs_prev:get_sedfs_prev,    \n    get_sedfs:get_sedfs,\n    //des\n    get_deses:get_deses,\n    get_fst_lyr_deses:get_fst_lyr_deses,\n    get_lst_lyr_deses:get_lst_lyr_deses,\n    get_which_lyr_deses:get_which_lyr_deses,\n    get_some_deses:get_some_deses,\n    //mat\n    nd2ele:nd2ele,\n    sdfs2mat:sdfs2mat,\n    //\n    sdfs2edfs:sdfs2edfs,\n    sdfs2sedfs:sdfs2sedfs,\n    edfs2mat:edfs2mat,\n    edfs2sdfs:edfs2sdfs,\n    edfs2sedfs:edfs2sedfs,\n    sedfs2mat:sedfs2mat,\n    sedfs2sdfs:sedfs2sdfs,\n    sedfs2edfs:sedfs2edfs,\n    //\n    update_disconnected_nodes,\n    update_orig_nodes,\n    leafize,\n    rootize,\n    disconnect,\n    rm_fstch,\n    rm_lstch,\n    rm_which,\n    rm_some,\n    rm_all,\n    //\n    update_treeid,\n    update_one_nodeid,\n    update_nodes_ids,\n    prepend_child_tree,\n    append_child_tree,\n    add_rsib_tree,\n    add_lsib_tree,\n    insert_child_tree,\n    //\n    get_root_via_tree,\n    tree2sdfs,\n}\n\n\n","const fs = require(\"fs\")\n\nfunction rjson(fn) {\n    let buf = fs.readFileSync(fn)\n    let s = buf.toString()\n    let d = JSON.parse(s)\n    return(d)\n}\n\nfunction wjson(fn,js) {\n    let s =JSON.stringify(js)\n    fs.writeFileSync(fn,s)\n}\n\n\nfunction is_int_str(s) {\n    let n = parseInt(s)\n    let ns = n.toString()\n    return(ns === s)\n}\n\n\nmodule.exports = {\n    rjson,\n    wjson,\n    is_int_str,\n}\n","const ndcls = require('./ndcls.js')\nconst ndfunc = require('./ndfunc.js')\nconst ndfuncterm = require('./ndfuncterm.js')\nconst ndutil = require('./util.js')\n\nmodule.exports = {\n    ndfunc:ndfunc,\n    ndfuncterm:ndfuncterm,\n    ndcls:ndcls,\n    ndutil:ndutil,\n}\n","const ndutil = require('./util.js')\nconst cmmn = require('./cmmn.js')\nconst ndfunc = require('./ndfunc.js')\nconst EventTarget = require('./event-target.js').EventTarget\nconst STRUCT_KEYS = ['_fstch','_lsib','_rsib','_parent','_tree']\n\n\nfunction _is_inited(nd) {\n    //被添加到了树上\n    let cond = (nd._tree !== undefined)\n    return(cond)\n}\n\nfunction _is_root(nd) {\n    //根节点的_tree 指向自己\n    let cond = (nd._tree === nd)\n    return(cond)\n}\n\nfunction _is_fstch(nd) {\n    //没有左兄弟\n    let cond = (nd._lsib === null)\n    return(cond)\n}\n\nfunction _is_lstch(nd) {\n    //没有右兄弟\n    let cond = (nd._rsib === null)\n    return(cond)\n}\n\n\nfunction _is_leaf(nd) {\n    //没有子\n    let cond = (nd._fstch === null)\n    return(cond)\n}\n\n\nfunction _is_lonely(nd) {\n    let sibs = nd.$sibs(true)\n    return(sibs.length === 1)\n}\n\n\n/* child query*/\n\n//_fstch is always directly\n\nfunction _lstch(nd) {\n    let child = nd._fstch\n    let oldch = child\n    while(child!==null) {\n        oldch = child\n        child = child._rsib\n    }\n    return(oldch)\n}\n\nfunction _which_child(index,nd) {\n    let c = 0\n    let child = nd._fstch\n    while(true) {\n        if(c === index) {\n            return(child)\n        } else {\n            if(child === null) {\n                return(child)\n            } else {\n            }\n        }\n        child = child._rsib\n        c = c + 1\n    }\n}\n\nfunction _some_children(nd,...whiches) {\n    let children = []\n    let c = 0\n    let child = nd._fstch\n    while(true) {\n        if(whiches.includes(c)) {\n            children.push(child)\n        } else {\n            if(child === null) {\n                return(children)\n            } else {\n            }\n        }\n        child = child._rsib \n        c = c + 1\n    }\n}\n\nfunction _children(nd) {\n    let children = []\n    let c = 0\n    let child = nd._fstch\n    while(true) {\n        if(child === null) {\n            return(children)\n        } else {\n            children.push(child)\n        }\n        child = child._rsib\n        c = c + 1\n    }\n}\n\n\nfunction _children_count(nd) {\n    let c = 0\n    let child = nd._fstch\n    while(true) {\n        if(child === null) {\n            return(c)\n        } else {\n        }\n        child = child._rsib\n        c = c + 1\n    }\n}\n\n\n/*sib*/\n\n//_rsib is always directly \n\nfunction _lstsib(nd,including_self=false) {\n    let rsib = nd._rsib\n    let oldrsib = nd\n    while(rsib !== null) {\n        oldrsib = rsib\n        rsib = rsib._rsib \n    }  \n    if(including_self){\n        return(oldrsib)\n    } else {\n        if(oldrsib !== nd) {\n            return(oldrsib)\n        } else {\n            return(null)\n        }\n    }    \n}\n\n\n\nfunction _fstsib(nd,including_self=false) {\n    let p = _parent(nd)\n    if(p === null) {\n        return((including_self)?nd:null)\n    } else {\n        let fstsib = p._fstch\n        if(including_self) {\n            return(fstsib)        \n        } else {\n            if(fstsib !== nd) {\n                return(fstsib)\n            } else {\n                return(null)\n            }\n        }\n    }\n}\n\n\nfunction _lsib(nd) {\n    let fstsib = _fstsib(nd,false)\n    if(fstsib === null) {\n        return(null)\n    } else {\n        let sib = fstsib\n        while(true) {\n            if(sib._rsib === nd) {\n                return(sib)\n            } else {\n            }\n            sib = sib._rsib\n        }\n    }\n}\n\n\nfunction _psibs(nd) {\n    let psibs = []\n    let fstsib = _fstsib(nd,true)\n    let sib = fstsib\n    while(sib !== null) {\n        if(sib === nd) {\n            return(psibs)           \n        } else {\n            psibs.push(sib)\n        }\n        sib = sib._rsib\n    }\n}\n\n\nfunction _fsibs(nd) {\n    let fsibs = []\n    let rsib = nd._rsib\n    while(rsib !== null) {\n        fsibs.push(rsib)\n        rsib = rsib._rsib\n    }\n    return(fsibs)\n}\n\nfunction _sibs(nd,including_self=false) {\n    let psibs = _psibs(nd)\n    let fsibs = _fsibs(nd)\n    let me = [nd]\n    if(including_self) {\n        sibs = psibs.concat(me,fsibs)\n    } else {\n        sibs = psibs.concat(fsibs)\n    }\n    return(sibs)\n}\n\n\nfunction _which_sib(index,nd) {\n    let sib = _fstsib(nd,true)\n    let c = 0\n    while(true) {\n        if(sib === null) {\n            return(null)\n        } else {\n            if(c==index) {\n                return(sib)\n            }\n        }\n        sib = sib._rsib\n        c = c + 1\n    }    \n}\n\nfunction _some_sibs(nd,...indexes) {\n    let sibs = _sibs(nd,true) \n    let some = sibs.filter(\n        (r,i) => indexes.includes(i) \n    )\n    return(some)   \n}\n\n\nfunction _sibseq(nd) {\n    let psibs = _psibs(nd)\n    return(psibs.length)\n}\n\n\nfunction _sibs_count(nd,including_self=false) {\n    let sibs = nd.$sibs(including_self)\n    return(sibs.length)\n}\n\n\n\n\n/*ance*/\n\nfunction _parent(nd) {\n    let lstsib = _lstsib(nd,true)\n    return(lstsib._parent)\n}\n\nfunction _root(nd) {\n    let ance = nd\n    let old = nd\n    while(ance !== null) {\n        old = ance\n        ance = ance.$parent()\n    }\n    return(old)    \n}\n\nfunction _which_ance(index,nd) {\n    let c = 0\n    let ance = nd\n    while(ance !== null) {\n        if(c === index) {\n            return(ance)\n        } else {\n        }\n        ance = ance.$parent()\n        c = c+1\n    }\n    return(null)\n}\n\nfunction _ances(nd,including_self=false) {\n    let ances = []\n    let ance = nd\n    if(including_self) {\n        ances.push(ance)\n    } else {\n    } \n    ance = ance.$parent()\n    while(ance !== null)  {\n        ances.push(ance)\n        ance = ance.$parent()\n    }\n    return(ances) \n}\n\nfunction _some_ances(nd,...indexes) {\n    let ances = _ances(nd,true)\n    let some = ances.filter(\n        (r,i) => indexes.includes(i)\n    )\n    return(some)      \n}\n\nfunction _ances_count(nd,including_self=false) {\n    let ances = _ances(nd,including_self)\n    return(ances.length)\n}\n\n\n/**/\nfunction _luncle(nd) {\n    let p = nd.$parent()\n    if(p === null) {\n        return(null)\n    } else {\n        return(p.$lsib())\n    } \n}\n\nfunction _runcle(nd) {\n    let p = nd.$parent()\n    if(p === null) {\n        return(null)\n    } else {\n        return(p.$rsib())\n    } \n}\n\nfunction _lcin(nd) {\n    let luncle = nd.$luncle()\n    if(!nd.$is_fstch()) {\n        return(null) \n    } else if(luncle === null) {\n        return(null)\n    } else {\n        return(luncle.$lstch())\n    }\n}\n\nfunction _rcin(nd) {\n    let runcle = nd.$runcle()\n    if(!nd.$is_lstch()) {\n        return(null)\n    } else if(runcle === null) {\n        return(null)\n    } else {\n        return(runcle.$fstch())\n    }\n}\n\n/**/\n\nfunction _lyr(nd) {\n    let rt = nd.$root() \n    let sdfs = rt.$sdfs() \n    let depth = nd.$depth()\n    let lyr = sdfs.filter(nd=>(nd.$depth() === depth))\n    return(lyr)    \n}\n\n/**/\n\n\nfunction _breadth(nd) {\n    let lyr = nd.$lyr()\n    let breadth = lyr.indexOf(nd)\n    return(breadth)   \n}\n\nfunction _width(nd) {\n    //只计算叶子个数的宽度\n    let sdfs = nd.$sdfs()\n    sdfs = sdfs.filter(nd=>nd.$is_leaf())\n    return(sdfs.length)\n}\n\nfunction _offset(nd) {\n    //edfs filter-by-isleaf ,and then index \n    //如果是非叶子,dlmost的offset\n    let rt = nd.$root()\n    let edfs = rt.$edfs()\n    let index;\n    if(nd.$is_leaf()) {\n        index = edfs.indexOf(nd) \n    } else {\n        let dlmost = nd.$dlmost_des()\n        index = edfs.indexOf(dlmost)\n    }\n    edfs = edfs.slice(0,index+1)\n    offset = edfs.filter(nd=>nd.$is_leaf()).length - 1\n    return(offset) \n}\n\n/**/\n\n\nfunction _deses(nd,including_self=false) {\n    let drmost = _drmost_des(nd) \n    let sdfs = _sdfs(nd)\n    let index = sdfs.indexOf(drmost) \n    if(including_self) {\n        return(sdfs.slice(0,index+1)) \n    } else {\n        return(sdfs.slice(1,index+1)) \n    } \n}\n\nfunction _lst_lyr_deses(nd) {\n    let deses = nd.$deses(false)\n    let des_depths = deses.map(r=>r.$depth())\n    let max = Math.max(...des_depths)\n    deses = deses.filter(r=>(r.$depth()===max))\n    return(deses) \n}\n\nfunction _which_lyr_deses(index,nd) {\n    let depth = nd.$depth()\n    let deses = nd.$deses(false)\n    let des_depths = deses.map(r=>r.$depth())\n    deses = deses.filter(r=>(r.$depth()===(depth+index)))\n    return(deses)\n}\n\nfunction _some_lyrs_deses(nd,...rel_depths) {\n    let depth = nd.$depth()\n    let abs_depths = rel_depths.map(r=>r+depth)\n    let deses = nd.$deses(false)\n    let des_depths = deses.map(r=>r.$depth())\n    deses = deses.filter(r=>(abs_depths.includes(r.$depth())))\n    return(deses)\n}\n\n\n/*add node */\n\nfunction _prepend_child(nd,child) {\n    //只有根节点才可以被链接到另一颗树上\n    let cond = nd.$is_leaf()\n    child._tree = nd._tree\n    child._lsib = null\n    if(cond){\n        //child 也是lstch\n        child._rsib = null\n        child._parent = nd\n    } else {\n        //变更old_fstch\n        let old_fstch = nd._fstch\n        //old_fstch 不再是fstch\n        old_fstch._lsib = undefined\n        //更新child\n        child._rsib = old_fstch\n        //添加child \n    }   \n    nd._fstch = child\n    return(child)\n}   \n\n\nfunction _append_child(nd,child) {\n    let cond = nd.$is_leaf() \n    child._tree = nd._tree\n    child._rsib = null\n    if(cond){\n        //child 也是lstch\n        nd._fstch = child\n        child._lsib = null\n    } else {\n        //变更old_lstch\n        let old_lstch = nd.$lstch() \n        //old_lstch 不再是lstch\n        old_lstch._parent = undefined\n        old_lstch._rsib = child\n    }\n    child._parent = nd\n    return(child)\n}\n\n\n\nfunction _add_rsib(nd,rsib) {\n    //root 不可操作\n    if(nd.$is_root()) {\n        console.log(\"cant addrsib to root\")\n        return(nd)\n    }\n    //\n    let cond = nd.$is_lstch()\n    rsib._tree = nd._tree\n    if(cond) {\n        rsib._parent = nd._parent\n        nd._parent = undefined\n        rsib._rsib = null\n    } else {\n        rsib._rsib = nd._rsib\n    }\n    nd._rsib = rsib\n    return(rsib)\n}\n\n\nfunction _add_lsib(nd,lsib) {\n    //root 不可操作\n    if(nd.$is_root()) {\n        console.log(\"cant addlsib to root\")\n        return(nd)\n    }\n    //\n    let cond = nd.$is_fstch()\n    lsib._tree = nd._tree\n    if(cond) {\n        let parent = nd.$parent() \n        nd._lsib = undefined\n        lsib._lsib = null\n        parent._fstch = lsib\n    } else {\n        let old_lsib = nd.$lsib()\n        old_lsib._rsib = lsib\n    }\n    lsib._rsib = nd\n    return(lsib)\n}\n\n\nfunction _insert_child(which,nd,child) {\n    let children = _children(nd)\n    let lngth = children.length\n    if(lngth ===0) {\n        child = _prepend_child(nd,child)\n    } else {\n        let cond = (which<=lngth) && (which >=0)\n        if(!cond) {\n            console.log(\"not in range!!\")\n        } else {\n            if(which === 0) {\n                child = _prepend_child(nd,child)\n            } else if(which === lngth) {\n                child = _append_child(nd,child)\n            } else {\n                let lnd = children[which-1]\n                child = _add_rsib(lnd,child)\n            }   \n        }   \n    }\n    return(child)   \n}   \n\n\n/*sdfs*/\n\nfunction _rsib_of_fst_ance_having_rsib(nd) {\n    let p = nd.$parent()\n    while(p!==null) {\n        let rsib = p.$rsib()\n        if(rsib !== null) {\n            return(rsib)\n        } else {\n            p = p.$parent()  \n        }\n    }\n    return(null)\n}\n\nfunction _sdfs_next(nd) {\n    let fstch = nd.$fstch()\n    if(fstch !== null) {\n        return(fstch)\n    } else {\n        let rsib = nd.$rsib()\n        if(rsib !== null) {\n            return(rsib)\n        } else {\n            return(nd.$rsib_of_fst_ance_having_rsib())\n        }\n    }    \n}\n\nfunction _drmost_des(nd) {\n    let old_lstch = nd\n    let lstch = nd.$lstch()\n    while(lstch !== null) {\n        old_lstch = lstch\n        lstch = lstch.$lstch()\n    }\n    return(old_lstch)\n}\n\nfunction _sdfs_prev(nd) {\n    if(nd.$is_root()) {\n        return(null)\n    }\n    let cond = nd.$is_leaf()\n    if(cond) {\n        let lsib = nd.$lsib()\n        if(lsib !== null) {\n            return(lsib)\n        } else {\n            let parent = nd.$parent()\n            return(parent)\n        }\n    } else {\n        let lsib = nd.$lsib()\n        if(lsib !== null) {\n            let cond = lsib.$is_leaf()\n            if(cond) {\n                return(lsib)\n            } else {\n                return(lsib.$drmost_des())\n            }\n        } else {\n            let parent = nd.$parent()\n            return(parent)\n        }\n    }\n}\n\nfunction _sdfs(nd) {\n    let depth = nd.$depth()\n    if(nd === null) {\n        return([])\n    } else {\n        let sdfs =[nd]\n        nd = nd.$sdfs_next()\n        while(nd!==null && (nd.$depth() >depth) ) {\n            sdfs.push(nd)\n            nd = nd.$sdfs_next()\n        }\n        return(sdfs)  \n    }  \n}\n\n/**/\n\nfunction _dlmost_des(nd) {\n    let old_fstch = nd\n    let fstch = nd.$fstch()\n    while(fstch !== null) {\n        old_fstch = fstch\n        fstch = fstch.$fstch()\n    }\n    return(old_fstch)\n}\n\nfunction _edfs_next(nd) {\n    let rsib = nd.$rsib()\n    if(rsib === null) {\n        //如果没有右兄弟，说明节点是lstch,此时应该返回父节点\n        let p = nd.$parent()\n        return(p)\n    } else {\n       //如果有右兄弟，返回down-left-most-of-rsib\n       return(rsib.$dlmost_des())\n    }\n}\n\nfunction _lsib_of_fst_ance_having_lsib(nd) {\n    /*\n        along the parent chain until root,not_including_self\n        if the parent have lsib,return the lsib-of-parent\n        ---------\n    */\n    let parent = nd.$parent() \n    while(parent!==null) {\n        let lsib = parent.$lsib()\n        if(lsib!==null) {\n            return(lsib)\n        } else {\n            parent = parent.$parent()\n        }\n    }\n    return(null)\n}\n\nfunction _edfs_prev(nd) {\n    let cond = nd.$is_leaf() \n    if(!cond) {\n        return(nd.$lstch())\n    } else {\n       let lsib = nd.$lsib()\n       if(lsib === null) {\n           return(nd.$lsib_of_fst_ance_having_lsib())\n       } else {\n           return(lsib)\n       }\n    }   \n}\n\n\n\nfunction _edfs(nd) {\n    let edfs = []\n    let nxt = nd.$dlmost_des()\n    while(nxt !== null ) {\n        edfs.push(nxt)\n        if(nxt === nd) {\n            break;\n        } else {\n            nxt = nxt.$edfs_next()\n        }\n    }\n    return(edfs)\n\n}\n\n\n/**/\n\nfunction _sedfs_next(nd) {\n    let visited = nd.$visited\n    let cond = nd.$is_leaf() \n    if(cond) {\n        if(visited) {\n            let rsib = nd.$rsib()\n            if(rsib === null) {\n                return(nd.$parent())\n            } else {\n                return(rsib)\n            }\n        } else {\n            nd.$visited = true\n            return(nd)\n        }\n    } else {\n        if(visited) {\n            let rsib = nd.$rsib()\n            if(rsib === null) {\n                return(nd.$parent())\n            } else {\n                return(rsib)\n            }\n        } else {\n            nd.$visited = true\n            return(nd.$fstch())\n        }\n    }   \n}\n\nfunction _sedfs_prev(visited,nd) {\n    let cond = nd.$is_leaf() \n    if(cond) {\n        if(visited) {\n            return(nd)\n        } else {\n            let lsib = nd.$lsib()\n            if(lsib === null) {\n                return(nd.$parent())\n            } else {\n                return(lsib)\n            }\n        }\n    } else {\n        if(visited) {\n            return(nd.$lstch())\n        } else {\n            let lsib = nd.$lsib()\n            if(lsib === null) {\n                return(nd.$parent())\n            } else {\n                return(lsib)\n            }\n        }\n    }\n}\n\nfunction _clear_visited(nd) {\n    let sdfs = nd.$sdfs()\n    sdfs.forEach(\n        nd=>{delete nd.$visited}\n    )\n}\n\nfunction _is_sedfs_traverse_finished(startnd,nd) {\n    let cond = (nd.$visited) && (startnd === nd)\n    return(cond)\n}\n\nfunction _sedfs(nd) {\n    _clear_visited(nd);\n    let sedfs = []\n    let st = new Set()\n    let startnd = nd\n    while(!_is_sedfs_traverse_finished(startnd,nd)) {\n        if(st.has(nd)) {\n            nd.$close_at = sedfs.length\n        } else {\n            nd.$open_at = sedfs.length\n            st.add(nd) \n        }\n        sedfs.push(nd)\n        nd = _sedfs_next(nd)\n    }\n    startnd.$close_at = sedfs.length\n    sedfs.push(startnd)\n    sedfs.forEach(nd=>{delete nd.$visited})     \n    return(sedfs)    \n}\n\n\n/**/\nfunction _leafize(nd) {\n    nd._fstch = null\n    return(nd)\n}\n\nfunction _rootize(nd) {\n    nd._lsib = null\n    nd._rsib = null\n    nd._parent = null\n    return(nd)\n}\n\nfunction _update_disconnected_nodes(nd) {\n    let nsdfs = nd.$sdfs() \n    nsdfs.forEach(\n       nd=> {\n           nd._tree = nsdfs[0]\n       }\n    )\n    return(nsdfs)\n}\n\n\n\nfunction _disconn(nd) {\n    let cond = nd.$is_root() \n    if(cond) {\n        //do nothing\n        return(nd)\n    } else if(nd.$is_lonely()) {\n        //\n        let parent = nd.$parent() \n        _leafize(parent); \n        let nsdfs = _update_disconnected_nodes(nd);\n        _rootize(nd);\n        return(nd)\n    } else {\n        if(nd.$is_fstch()) {\n            //节点变味新树的根节点\n            let rsib = nd.$rsib()\n            //右兄弟变成了fstch, lsib 指向null\n            rsib._lsib = null\n            //右兄弟变成了fstch,parent要指向rsib\n            // parent 的fstch 要指向rsib\n            let parent = nd.$parent() \n            parent._fstch = nd._rsib\n            //后代节点关系不变，但是tree变为当前节点._id\n            let nsdfs = _update_disconnected_nodes(nd)\n            //nd 变为分离出去的tree的root\n            _rootize(nd);\n            return(nd)\n        } else if(nd.$is_lstch()) {    \n            //节点变味新树的根节点\n            let lsib = nd.$lsib() \n            lsib._rsib = nd._rsib\n            //左兄弟变成了lstch,左邻居要指向parent\n            lsib._parent = nd._parent\n            //后代节点关系不变，但是tree变为当前节点._id\n            let nsdfs = _update_disconnected_nodes(nd)\n            //nd 变为分离出去的tree的root\n            _rootize(nd);\n            return(nd)\n        } else {\n            //节点变味新树的根节点\n            let lsib = nd.$lsib() \n            lsib._rsib = nd._rsib\n            //后代节点关系不变，但是tree变为当前节点._id\n            let nsdfs = _update_disconnected_nodes(nd)\n            //nd 变为分离出去的tree的root\n            _rootize(nd);\n            return(nd)\n        }\n    }  \n}\n\n\n\n/**/\nfunction _add_extra(d,nd) {\n    for(let k in d) {\n        nd[k] = d[k]\n    }\n}\n/**/\n\nfunction _nd2unhandled_ele(nd) {\n    let ele = {}\n    ele._nd = nd\n    ele._children = []\n    return(ele)\n}\n\n\nfunction _sdfs2mat(sdfs) {\n    let m = []\n    let nd = sdfs[0]\n    let unhandled = [_nd2unhandled_ele(nd)]\n    unhandled[0]._pbreadth = null\n    while(unhandled.length>0){\n        let next_unhandled = []\n        for(let i=0;i<unhandled.length;i++) {\n            unhandled[i]._breadth = i\n            unhandled[i]._depth = m.length\n            let children = unhandled[i]._nd.$children() \n            children = children.map(nd=>_nd2unhandled_ele(nd))\n            children.forEach(\n                (r,index)=>{\n                    r._pbreadth = unhandled[i]._breadth\n                    unhandled[i]._children.push([(m.length+1),next_unhandled.length+index])\n                }\n            )\n            next_unhandled = next_unhandled.concat(children)\n        }\n        let lyr = unhandled\n        m.push(lyr)\n        unhandled = next_unhandled\n    }  \n    return(m)\n}\n\n\n/**/\n\nclass _Node extends EventTarget {\n    constructor() {\n        super();\n        this._fstch = null\n        this._lsib = undefined\n        this._rsib = undefined\n        this._parent = undefined\n        this._tree = undefined\n        this.$guid = cmmn.gen_guid()\n    }\n    $is_inited() {\n        return(_is_inited(this))\n    }\n    $is_root() {\n        return(_is_root(this))\n    }\n    $is_fstch() {\n        return(_is_fstch(this))\n    }\n    $is_lstch() {\n        return(_is_lstch(this))\n    }   \n    $is_leaf() {\n        return(_is_leaf(this))\n    }\n    $is_lonely() {\n        return(_is_lonely(this))\n    }\n    //child\n    $fstch() {\n        return(this._fstch)\n    }\n    $lstch() {\n        return(_lstch(this))\n    }\n    $which_child(index) {\n        return(_which_child(index,this))\n    }\n    $some_children(...indexes) {\n        return(_some_children(this,...indexes))\n    }\n    $children() {\n        return(_children(this))\n    }\n    $children_count() {\n        return(_children_count(this))\n    }\n    //\n    $rsib() {\n        return(this._rsib)\n    }\n    $lsib() {\n        return(_lsib(this))\n    }\n    $fstsib(including_self=false) {\n        return(_fstsib(this,including_self))\n    } \n    $lstsib(including_self=false) {\n        return(_lstsib(this,including_self))\n    }\n    $psibs() {\n        return(_psibs(this))\n    }\n    $fsibs() {\n        return(_fsibs(this))\n    }\n    $which_sib(index) {\n        return(_which_sib(index,this))\n    }\n    $some_sibs(...indexes) {\n        return(_some_sibs(this,...indexes))\n    }\n    $sibseq() {\n        return(_sibseq(this))\n    }\n    $sibs(including_self=false) {\n        return(_sibs(this,including_self))\n    }\n    $sibs_count(including_self=false) {\n        return(_sibs_count(this,including_self))\n    } \n    //\n    $parent() {\n        return(_parent(this))\n    } \n    $root() {\n        return(_root(this))\n    } \n    $ances(including_self=false) {\n        return(_ances(this,including_self))\n    }\n    $which_ance(index) {\n        return(_which_ance(index,this))\n    }\n    $some_ances(...indexes) {\n        return(_some_ances(this,...indexes))\n    }\n    $ances_count(including_self=false) {\n        return(_ances_count(this,including_self))\n    }\n    //\n    $prepend_child(child) {\n        child = (child===undefined)?(new _Node()):child\n        return(_prepend_child(this,child))       \n    }\n    $insert_child(which,child) {\n        child = (child===undefined)?(new _Node()):child\n        return(_insert_child(which,this,child))\n    }\n    $append_child(child)  {\n        child = (child===undefined)?(new _Node()):child\n        return(_append_child(this,child))\n    }\n    $clone() {\n        if(_is_root(this)) {\n            let ndict = _dump(this)\n            return(_load(ndict))\n        } else {\n            let index = _sibseq(this)\n            let parent = _parent(this)\n            _disconn(this)\n            let ndict = _dump(this)\n            let dup = _load(ndict)\n            _insert_child(index,parent,this)\n            return(dup)   \n        } \n    }\n    $append_children(n,child) {\n        let children = []\n        for(let i=0;i<n;i++) {\n            let ch = (child===undefined)?(new _Node()):child.$clone()\n            ch = _append_child(this,ch)\n            children.push(ch)\n        }\n        return(children)\n    }\n    //\n    $add_rsib(rsib) {\n        rsib = (rsib===undefined)?(new _Node()):rsib\n        return(_add_rsib(this,rsib))\n    }\n    $add_lsib(lsib)  {\n        lsib = (lsib===undefined)?(new _Node()):lsib\n        return(_add_lsib(this,lsib))\n    }  \n    //\n    $rsib_of_fst_ance_having_rsib() {\n        return(_rsib_of_fst_ance_having_rsib(this))\n    } \n    $sdfs_next() {\n        return(_sdfs_next(this)) \n    }\n    $drmost_des() {\n        return(_drmost_des(this))\n    }\n    $sdfs_prev() {\n        return(_sdfs_prev(this))\n    }\n    $sdfs() {\n        return(_sdfs(this))\n    }\n    //\n    $dlmost_des() {\n        return(_dlmost_des(this))\n    }\n    $edfs_next() {\n        return(_edfs_next(this))\n    }\n    $lsib_of_fst_ance_having_lsib() {\n        return(_lsib_of_fst_ance_having_lsib(this))\n    }\n    $edfs_prev() {\n        return(_edfs_prev(this))\n    }\n    $edfs() {\n        return(_edfs(this))\n    }\n    $offset() {\n        return(_offset(this))\n    }\n    //\n    $sedfs_next() {\n        return(_sedfs_next(this))\n    }\n    $sedfs_prev(visited) {\n        return(_sedfs_prev(this))\n    }\n    $sedfs(){\n        return(_sedfs(this))\n    }\n    //\n    $deses(including_self=false) {\n        return(_deses(this,including_self))\n    }\n    $lst_lyr_deses() {\n        return(_lst_lyr_deses(this))\n    }\n    $which_lyr_deses(index) {\n        return(_which_lyr_deses(index,this))\n    }\n    $some_lyrs_deses(...rel_depths) {\n        return(_some_lyrs_deses(this,...rel_depths))\n    }\n    //\n    $count(including_self=true) {\n        return(_deses(this,including_self).length)\n    }\n    $depth(including_self=false) {\n        return(_ances(this,including_self).length)\n    }\n    $height() {\n        let depth = this.$depth()\n        let sdfs = this.$sdfs()\n        let des_depths = sdfs.map(nd=>nd.$depth())\n        let max = Math.max(...des_depths)\n        return(max-depth+1)        \n    }\n    $breadth() {\n        return(_breadth(this))\n    }\n    $width() {\n        return(_width(this))\n    }\n    //\n    $lyr() {\n        return(_lyr(this))\n    }\n    //\n    $lcin() {\n        return(_lcin(this))\n    }\n    $rcin() {\n        return(_rcin(this))\n    }\n    $luncle() {\n        return(_luncle(this))\n    }\n    $runcle() {\n        return(_runcle(this))\n    }\n    //\n    $sdfs_repr() {\n        let rt = this.$root()\n        let tree = _sdfs(rt)\n        let sdfs = _sdfs(this)\n        let depths = sdfs.map(nd=>nd.$depth()) \n        let indents = depths.map(depth=>'    '.repeat(depth))\n        indents.forEach((indent,i)=>{console.log(indent+'['+tree.indexOf(sdfs[i])+']'+' : '+sdfs[i].$guid)})    \n    }\n    $sedfs_repr() {\n        let rt = this.$root()\n        _set_id(rt)       \n        let sedfs = _sedfs(this)\n        sedfs.forEach(\n            (nd,i)=> {\n                let depth = nd.$depth()\n                let indent = '    '.repeat(depth)\n                if(i === nd.$open_at)  {\n                    console.log(indent+'<'+nd._id+' : ' + nd.$guid +'>')\n                }\n                if(i === nd.$close_at)  {\n                    console.log(indent+'</'+nd._id+' : ' +nd.$guid +'>')\n                }                               \n            }\n        )\n    }\n    //\n    $disconn() {\n        return(_disconn(this))\n    }\n    $rm_fstch() {\n        let fstch = this._fstch\n        return(_disconn(fstch))\n    }\n    $rm_lstch() {\n        let lstch = _lstch(this)\n        return(_disconn(lstch))\n    }\n    $rm_which(index) {\n        let child = _which_child(index,this) \n        return(_disconn(child))\n    }\n    $rm_some_children(...indexes) {\n        let children = _some_children(this,...indexes)\n        return(children.map(child=>_disconn(child)))\n    }\n    $rm_all_children() {\n        let children = _children(this)\n        return(children.map(child=>_disconn(child)))\n    }\n    //\n    $dump() {\n        if(this.$is_root()) {\n            return(_dump(this))\n        } else {\n            console.log('only root !!!')\n        }\n    }\n    $dump2file(fn) {\n        if(this.$is_root()) {\n            let ndict = _dump(this)\n            ndutil.wjson(fn,ndict)\n        } else {\n            console.log('only root !!!')\n        }\n    }\n    //\n    $sdfs2mat() {\n        return(_sdfs2mat(_sdfs(this)))\n    }          \n}\n\n\n/**/\n\nfunction _set_id(nd) {\n    //root代表一棵树, 给每个节点加sdfs_seq\n    let tree = _sdfs(nd)\n    tree.forEach(\n        (nd,i) => {nd._id = i}\n    )\n    return(tree)\n}\n\n\nfunction _rtjson2rt(root) {\n    let rt = new Tree()\n    rt._id = root._id\n    rt.$guid = root._guid\n    return(rt)       \n}\n\nfunction _get_ancend_via_id(id,nd) {\n    while(nd._id !== id) {\n        nd=nd._parent\n    }\n    return(nd)\n}\n\nfunction fill_other_attrs_for_load(nd,d) {\n    let other_ks = get_non_struct_keys(d)\n    for(let k of other_ks) {\n        nd[k] = d[k]\n    }\n    return(nd)\n}\n\n\n\nfunction _load(ndict) {\n    //从一个json结构变成tree,返回root\n    let k = cmmn.dict_keys(ndict)[0]\n    let root = ndfunc.get_root(ndict[k],ndict)\n    let rt = _rtjson2rt(root)\n    rt = fill_other_attrs_for_load(rt,root)\n    let prnd = rt\n    let prnj = root\n    let nj = ndfunc.get_sdfs_next(prnj,ndict)\n    let nd;\n    while(nj!==null) {\n        if(prnj._fstch ===nj._id) {\n            nd = prnd.$prepend_child()\n            nd._id = nj._id\n            nd.$guid = nj._guid\n            nd = fill_other_attrs_for_load(nd,nj)\n            prnd = nd\n            prnj = nj\n            nj = ndfunc.get_sdfs_next(prnj,ndict)\n        } else if(prnj._rsib ===nj._id) {\n            nd = prnd.$add_rsib()\n            nd._id = nj._id\n            nd.$guid = nj._guid\n            nd = fill_other_attrs_for_load(nd,nj)\n            prnd = nd\n            prnj = nj\n            nj = ndfunc.get_sdfs_next(prnj,ndict)\n        } else if(nj._parent!==null && nj._parent!==undefined) {\n            //lstch,并且上一個節點是drmost-of-lsib\n            let pid = nj._parent\n            prnd = _get_ancend_via_id(pid,prnd)\n            nd = prnd.$append_child()\n            nd._id = nj._id\n            nd.$guid = nj._guid\n            nd = fill_other_attrs_for_load(nd,nj)\n            prnd = nd\n            prnj = nj\n            nj = ndfunc.get_sdfs_next(prnj,ndict)\n        } else if(nj._parent===undefined){\n            //非lstch,并且上一個節點是drmost-of-lsib\n            let pnj = ndfunc.get_parent(nj,ndict)\n            let pid = pnj._id\n            prnd = _get_ancend_via_id(pid,prnd)\n            nd = prnd.$append_child()\n            nd._id = nj._id\n            nd.$guid = nj._guid\n            nd = fill_other_attrs_for_load(nd,nj)\n            prnd = nd\n            prnj = nj\n            nj = ndfunc.get_sdfs_next(prnj,ndict)\n        } else {\n            console.log('Impossible',prnd,prnj,nj)\n        } \n    }\n    return(rt)\n}\n\nfunction _dictize_nd_property(nd,k) {\n    if(nd[k] === null) {\n        return(null)\n    } else if(nd[k] === undefined) {\n        return(undefined) \n    } else {\n        return(nd[k]._id)\n    }\n}\n\nfunction get_non_struct_keys(nd) {\n    let all_ks = cmmn.dict_keys(nd)\n    let other_ks = all_ks.filter(\n        r=>!(STRUCT_KEYS.includes(r))\n    )\n    return(other_ks)\n}\n\nfunction fill_other_attrs_for_dump(nd,d) {\n    let other_ks = get_non_struct_keys(nd)\n    for(let k of other_ks) {\n        d[k] = nd[k]\n    }\n    return(d)\n}\n\nfunction _dump(rt) {\n    //把一个nd结构变成json结构, 这个nd 相当于脱离了tree的一个deepcopy\n    let sdfs = _set_id(rt)\n    //let sdfs = rt.$sdfs()\n    let treeid = rt._id\n    let nodes_dict = {}\n    sdfs.forEach(\n        (nd,i) => {\n            let d = {}\n            d._tree = treeid\n            d._fstch = _dictize_nd_property(nd,'_fstch') \n            d._lsib = _dictize_nd_property(nd,'_lsib')\n            d._rsib = _dictize_nd_property(nd,'_rsib') \n            d._parent = _dictize_nd_property(nd,'_parent') \n            d._id = nd._id\n            d._guid = nd.$guid\n            //\n            d = fill_other_attrs_for_dump(nd,d)\n            //\n            nodes_dict[nd._id] = d\n        }\n    )\n    return(nodes_dict)\n}\n\n\nclass Tree extends _Node {\n    constructor() {\n        super();\n        //初始化为根节点,根节点代表一棵树\n        this._fstch = null\n        this._lsib = null\n        this._rsib = null\n        this._parent = null\n        this._tree = this\n    }\n    $is_parent_of(nd) {\n        let p = nd.$parent()\n        return(p===this)\n    }\n    $is_root_of(nd) {\n        let rt = nd.$root()\n        return(rt === this)\n    }\n    $is_descendant_of(nd) {\n        let deses = nd.$deses(false)\n        let index = deses.indexOf(this)\n        return(index >=0)\n    }\n    $is_inclusive_descendant_of(nd) {\n        let deses = nd.$deses(true)\n        let index = deses.indexOf(this)\n        return(index >=0)\n    }\n    $is_ancestor_of(nd) {\n        let ances = nd.$ances(false)\n        let index = ances.indexOf(this)\n        return(index >=0)         \n    }\n    $is_inclusive_ancestor_of(nd) {\n        let ances = nd.$ances(true)\n        let index = ances.indexOf(this)\n        return(index >=0) \n    }\n    $is_sibling_of(nd) {\n        let sibs = nd.$sibs(false)\n        let index = sibs.indexOf(this)\n        return(index >=0)\n    }\n    $is_inclusive_siblings_of(nd) {\n        let sibs = nd.$sibs(true)\n        let index = sibs.indexOf(this)\n        return(index >=0)\n    }\n    $is_preceding_of(nd) {\n        let sdfs = nd.$sdfs()\n        let ndindex = sdfs.indexOf(nd)\n        let this_index = sdfs.indexof(this)\n        return(this_index>=0 && this_index < ndindex)\n    }\n    $is_following_of(nd) {\n        let sdfs = nd.$sdfs()\n        let ndindex = sdfs.indexOf(nd)\n        let this_index = sdfs.indexof(this)\n        return(this_index > ndindex)\n    }\n    $is_first_child_of(nd) {\n        return(this === nd.$fstch())\n    }\n    $is_child_of(nd) {\n        let children = nd.$children()\n        let index = children.indexOf(this)\n        return(index>=0)\n    }\n    $is_last_child_of(nd) {\n        return(this === nd.$lstch())\n    }\n    $is_previous_sibling_of(nd) {\n        return(this === nd.$lsib())\n    }\n    $is_next_sibling_of(nd) {\n        return(this === nd.$rsib())\n    }\n    $index() {\n        return(this.$sibseq())    \n    } \n    $sdfs_index() {\n        let sdfs = this.$sdfs()\n        return(sdfs.indexOf(this))\n    }\n}\n\nfunction load(from) {\n    if(typeof(from) === 'string') {\n        let ndict = ndutil.rjson(from)\n        return(_load(ndict))\n    } else if(typeof(from) === 'object') {\n        let ndict = from\n        return(_load(ndict))\n    } else {\n        return(new Tree())\n    }\n}\n\nfunction clone(nd) {\n    let ndcit = nd.$dump()\n    return(load(ndict))\n}\n\nfunction _ele_struct_eq(ele0,ele1) {\n    return(\n        ele0._pbreadth === ele1._pbreadth &&\n        ele0._breadth === ele1._breadth &&\n        ele0._depth === ele1._depth\n    )\n}\n\nfunction struct_eq(tree0,tree1) {\n    let m0 = tree0.$sdfs2mat()\n    let m1 = tree1.$sdfs2mat()\n    let flat0 = Array.prototype.concat(...m0)\n    let flat1 = Array.prototype.concat(...m1)\n    if(flat0.length !== flat1.length) {\n        return(false)\n    } else {\n        for(let i=0;i<flat0.length;i++) {\n            if(_ele_struct_eq(flat0[i],flat1[i])) { } else {return(false)}\n        }\n    }\n    return(true)\n}\n\nmodule.exports = {\n    Node:_Node,\n    Tree:Tree,\n    Root:Tree,\n    load:load,\n    clone:clone,\n    struct_eq:struct_eq,\n}\n\n\n/*\nvar ndcls = require('./ndcls')\nvar sh=require('./ndfuncterm.js').sdfs_show_root_tree\n\nvar rt = ndcls.load('./TEST/ndict.json')\nsh(rt.$dump())\nvar sedfs = rt.$sedfs()\nrt.$sedfs_repr()\n\nvar sdfs = rt.$sdfs()\nvar m = rt.$sdfs2mat()\nassert.strictEqual(m[0][0]._nd.$guid,sdfs[0].$guid)\nassert.strictEqual(m[1][0]._nd.$guid,sdfs[1].$guid)\nassert.strictEqual(m[2][0]._nd.$guid,sdfs[2].$guid)\nassert.strictEqual(m[2][1]._nd.$guid,sdfs[3].$guid)\nassert.strictEqual(m[2][2]._nd.$guid,sdfs[6].$guid)\n\nfunction gen_tree() {\n    var tree = new ndcls.Root()\n    var nd1 = tree.$append_child()\n    var nd2 = nd1.$append_child()\n    var nd3 = nd1.$append_child() \n    var nd4 = nd3.$append_child()\n    var nd5 = nd4.$add_rsib() \n    var nd6 = nd1.$add_rsib()\n    var nd7 = nd6.$prepend_child()\n    var nd8 = nd6.$append_child()\n    var nd9 = nd6.$append_child()\n    nd9.$append_children(6)\n    sh(tree.$dump())\n}\n\n*/\n","//https://dom.spec.whatwg.org/#callbackdef-eventlistener\n\nclass EventListenerOptions {\n    constructor() {\n        this.capture = false    \n    }\n}\n\nclass AddEventListenerOptions extends EventListenerOptions {\n    constructor() {\n        this.passive = false\n        this.once = false\n    }\n}\n\nclass EventListener {\n    handleEvent(event) {\n    }\n}\n\n\nclass EventTarget {\n    constructor(){\n    }\n    addEventListener(type,callback,options={}) {\n    }\n    removeEventListener(type,callback,options={}) {\n    }\n    dispatchEvent(event) {\n    }\n}\n\n\n\nmodule.exports = {\n    EventTarget\n}\n","const ndfunc = require('./ndfunc.js')\nconst cmmn = require('./cmmn.js')\n\nconst dflt_sdfs_show_connd = {\n    't':'├── ',\n    'v':'│   ',\n    'l':'└── ',\n    'ws':'    '\n}\n\nconst dflt_edfs_show_connd = {\n    't':'├── ',\n    'v':'│   ',\n    'l':'┌── ',\n    'ws':'    '\n}\n\n\n\nfunction dflt_calc_conn_map_func(conn) {\n    let rslt;\n    if(conn==='t') {\n        rslt = 'v'\n    } else if(conn === 'v') {\n        rslt = 'v'\n    } else {\n        rslt = 'ws'\n    }\n    return(rslt)\n}\n\n\n\nfunction conns2repr(conns,show_connd) {\n    conns = conns.map(conn=>show_connd[conn])\n    return(conns.join(''))\n}\n\n\nfunction clear_ui(nodes) {\n    for(let id in nodes) {\n        delete nodes[id]._ui\n    }\n}\n\n//sdfs\n\nfunction dflt_sdfs_calc_conns(nd,nodes) {\n    nd._ui = {}\n    if(ndfunc.is_root(nd)){\n        //跟节点没有前导ui 符号\n        nd._ui.conns = []\n        nd._ui.display = true\n    } else {\n        let parent = ndfunc.get_parent(nd,nodes)\n        //获取父节点的前导ui 符号序列数组\n        let pconns = parent._ui.conns\n        let conns = pconns.map(conn=>dflt_calc_conn_map_func(conn))\n        let cond = ndfunc.is_lstch(nd)\n        if(cond) {\n            conns.push('l')\n        } else {\n            conns.push('t')\n        }\n        nd._ui.conns = conns\n        nd._ui.display = true\n    }\n    return(nd)\n}\n\n\n\nfunction get_sdfs_repr_arr(nd,nodes,f){\n    let depth = ndfunc.get_depth(nd,nodes)\n    let sdfs = ndfunc.get_deses(nd,nodes,true)\n    sdfs = sdfs.map(nd=>dflt_sdfs_calc_conns(nd,nodes))\n    let conns_array = sdfs.map(nd=>nd._ui.conns)\n    conns_array = conns_array.map(conns=>conns.slice(depth))\n    conns_array = conns_array.map(conns=>conns2repr(conns,dflt_sdfs_show_connd))\n    let arr = conns_array.map((conns,i)=>(conns+'['+sdfs[i]._id+']'+' : '+sdfs[i]._guid))\n    arr = arr.filter((r,i)=>(sdfs[i]._ui.display === true))\n    return(arr)\n}\n\n\nfunction dflt_sdfs_show_callback() {\n}\n\n\nfunction sdfs_show_all(nd,nodes,f=dflt_sdfs_show_callback){\n    let root = ndfunc.get_root(nd,nodes)\n    get_sdfs_repr_arr(root,nodes,f)\n    let arr = get_sdfs_repr_arr(nd,nodes,f)\n    let repr = arr.join('\\n')\n    console.log(repr)\n    clear_ui(nodes)\n}\n\nfunction sdfs_show_root_tree(nodes,f=dflt_sdfs_show_callback){\n    let k = cmmn.dict_keys(nodes)[0]\n    let nd = ndfunc.get_root(nodes[k],nodes)\n    let arr = get_sdfs_repr_arr(nd,nodes,f)\n    let repr = arr.join('\\n')\n    console.log(repr)\n    clear_ui(nodes)\n}\n\n\n\nfunction sdfs_show_from(nd,nodes,from,f=dflt_sdfs_show_callback){\n    let root = ndfunc.get_root(nd,nodes)\n    get_sdfs_repr_arr(root,nodes,f)\n    let arr = get_sdfs_repr_arr(nd,nodes,f)\n    arr = arr.slice(from)\n    let repr = arr.join('\\n')\n    console.log(repr)\n    clear_ui(nodes)\n}\n\nfunction sdfs_show_to(nd,nodes,to,f=dflt_sdfs_show_callback){\n    let root = ndfunc.get_root(nd,nodes)\n    get_sdfs_repr_arr(root,nodes,f)\n    let arr = get_sdfs_repr_arr(nd,nodes,f)\n    arr = arr.slice(0,to)\n    let repr = arr.join('\\n')\n    console.log(repr)\n    clear_ui(nodes)\n}\n\n\nfunction sdfs_show_from_to(nd,nodes,from,to,f=dflt_sdfs_show_callback){\n    let root = ndfunc.get_root(nd,nodes)\n    get_sdfs_repr_arr(root,nodes,f)\n    let arr = get_sdfs_repr_arr(nd,nodes,f)\n    arr = arr.slice(from,to)\n    let repr = arr.join('\\n')\n    console.log(repr)\n    clear_ui(nodes)\n}\n\n\n//\n\nfunction dflt_edfs_show_callback() {\n}\n\nfunction dflt_edfs_calc_conns(nd,nodes) {\n    nd._ui = {}\n    if(ndfunc.is_root(nd)){\n        //跟节点没有前导ui 符号\n        nd._ui.conns = []\n    } else {\n        let parent = ndfunc.get_parent(nd,nodes)\n        //获取父节点的前导ui 符号序列数组\n        let pconns = parent._ui.conns\n        let conns = pconns.map(conn=>dflt_calc_conn_map_func(conn))\n        let cond = ndfunc.is_fstch(nd)\n        if(cond) {\n            conns.push('l')\n        } else {\n            conns.push('t')\n        }\n        nd._ui.conns = conns\n    }\n    return(nd)\n}\n\n\nfunction get_edfs_repr_arr(nd,nodes,f){\n    let depth = ndfunc.get_depth(nd,nodes)\n    let edfs = ndfunc.get_edfs(nd,nodes)\n    edfs.reverse()\n    edfs = edfs.map(nd=>dflt_edfs_calc_conns(nd,nodes))\n    edfs.reverse()\n    let deses = ndfunc.get_deses(nd,nodes,true)\n    let ids = deses.map(r=>r._id)\n    edfs = edfs.filter(r=>ids.includes(r._id))\n    let conns_array = edfs.map(nd=>nd._ui.conns)\n    conns_array = conns_array.map(conns=>conns.slice(depth,conns.length))\n    conns_array = conns_array.map(conns=>conns2repr(conns,dflt_edfs_show_connd))\n    let arr = conns_array.map((conns,i)=>(conns+edfs[i]._id))\n    return(arr)\n}\n\n\nfunction edfs_show_all(nd,nodes,f=dflt_edfs_show_callback){\n    let root = ndfunc.get_root(nd,nodes)\n    get_edfs_repr_arr(root,nodes,f)\n    let arr = get_edfs_repr_arr(nd,nodes,f)\n    let repr = arr.join('\\n')\n    console.log(repr)\n    clear_ui(nodes)\n}\n\nfunction edfs_show_root_tree(nodes,f=dflt_edfs_show_callback){\n    let k = cmmn.dict_keys(nodes)[0]\n    let nd = ndfunc.get_root(nodes[k],nodes)\n    let arr = get_edfs_repr_arr(nd,nodes,f)\n    let repr = arr.join('\\n')\n    console.log(repr)\n    clear_ui(nodes)\n}\n\nfunction edfs_show_from(nd,nodes,from,f=dflt_edfs_show_callback){\n    let root = ndfunc.get_root(nd,nodes)\n    get_edfs_repr_arr(nd,nodes,f)\n    let arr = get_edfs_repr_arr(nd,nodes,f)\n    arr = arr.slice(0,arr.length-from)\n    let repr = arr.join('\\n')\n    console.log(repr)\n    clear_ui(nodes)\n}\n\nfunction edfs_show_to(nd,nodes,to,f=dflt_edfs_show_callback){\n    let root = ndfunc.get_root(nd,nodes)\n    get_edfs_repr_arr(nd,nodes,f)\n    let arr = get_edfs_repr_arr(nd,nodes,f)\n    arr = arr.slice(arr.length-to,arr.length)\n    let repr = arr.join('\\n')\n    console.log(repr)\n    clear_ui(nodes)\n}\n\n\nfunction edfs_show_from_to(nd,nodes,from,to,f=dflt_edfs_show_callback){\n    let root = ndfunc.get_root(nd,nodes)\n    get_edfs_repr_arr(nd,nodes,f)\n    let arr = get_edfs_repr_arr(nd,nodes,f)\n    arr = arr.slice(arr.length-to,arr.length-from)\n    let repr = arr.join('\\n')\n    console.log(repr)\n    clear_ui(nodes)\n}\n\n\n//sedfs\n\nconst dflt_sedfs_show_connd = {\n    indent:'    ',\n    stag_prefix:'<',\n    stag_suffix:'>',\n    etag_prefix:'</',\n    etag_suffix:'>',\n}\n\n\nfunction gen_tag(tag,prefix,suffix) {\n    return(prefix+tag+suffix)\n}\n\nfunction sedfs_show_all(nd,nodes,show_connd=dflt_sedfs_show_connd) {\n    let sedfs = ndfunc.get_sedfs(nd,nodes,true)\n    let depths = sedfs.map(nd=>ndfunc.get_depth(nd,nodes))\n    let depth = ndfunc.get_depth(nd,nodes)\n    let indents = depths.map(r=>show_connd.indent.repeat(r-depth)) \n    let tags = sedfs.map(\n        nd=>{\n            if(nd._$visited === false) {\n                return(gen_tag(nd._id,show_connd.stag_prefix,show_connd.stag_suffix))\n            } else {\n                return(gen_tag(nd._id,show_connd.etag_prefix,show_connd.etag_suffix))\n            }\n        }\n    )\n    let lines = tags.map((tag,i)=>(indents[i]+tag)) \n    let repr = lines.join('\\n')\n    console.log(repr)\n}\n\nfunction sdfs_expand(nd,nodes,f=dflt_sdfs_show_callback) {\n    let sdfs = ndfunc.get_deses(nd,nodes,false)\n    sdfs.forEach(nd=>{nd._ui.display = true})\n    return(nodes)\n}\n\nfunction sdfs_foldup(nd,nodes,f=dflt_sdfs_show_callback) {\n    let sdfs = ndfunc.get_deses(nd,nodes,false)\n    sdfs.forEach(nd=>{nd._ui.display = false})\n    return(nodes)\n}\n\n\nmodule.exports = {\n    dflt_calc_conn_map_func,\n    conns2repr,\n    clear_ui,\n    //sdfs\n    dflt_sdfs_show_connd,\n    dflt_sdfs_calc_conns,\n    get_sdfs_repr_arr,\n    sdfs_show_all,\n    sdfs_show_root_tree,\n    sdfs_show_from,\n    sdfs_show_to,\n    sdfs_show_from_to,\n    sdfs_expand,\n    sdfs_foldup,\n    //edfs\n    dflt_edfs_show_connd,\n    dflt_edfs_calc_conns,\n    get_edfs_repr_arr,\n    edfs_show_all,\n    edfs_show_root_tree,\n    edfs_show_from,\n    edfs_show_to,\n    edfs_show_from_to,\n    //sedfs\n    dflt_sedfs_show_connd,\n    gen_tag,\n    sedfs_show_all,           \n}\n\n"],"sourceRoot":""}